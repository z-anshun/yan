// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.22.0
// 	protoc        v3.12.0
// source: register.proto

package proto

import (
	context "context"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

type Users struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name   string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Passwd string `protobuf:"bytes,2,opt,name=passwd,proto3" json:"passwd,omitempty"`
}

func (x *Users) Reset() {
	*x = Users{}
	if protoimpl.UnsafeEnabled {
		mi := &file_register_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Users) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Users) ProtoMessage() {}

func (x *Users) ProtoReflect() protoreflect.Message {
	mi := &file_register_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Users.ProtoReflect.Descriptor instead.
func (*Users) Descriptor() ([]byte, []int) {
	return file_register_proto_rawDescGZIP(), []int{0}
}

func (x *Users) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Users) GetPasswd() string {
	if x != nil {
		return x.Passwd
	}
	return ""
}

type ResponseMsg struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Status string `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
}

func (x *ResponseMsg) Reset() {
	*x = ResponseMsg{}
	if protoimpl.UnsafeEnabled {
		mi := &file_register_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResponseMsg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResponseMsg) ProtoMessage() {}

func (x *ResponseMsg) ProtoReflect() protoreflect.Message {
	mi := &file_register_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResponseMsg.ProtoReflect.Descriptor instead.
func (*ResponseMsg) Descriptor() ([]byte, []int) {
	return file_register_proto_rawDescGZIP(), []int{1}
}

func (x *ResponseMsg) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

type UpdateInfor struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	V    *Users `protobuf:"bytes,1,opt,name=v,proto3" json:"v,omitempty"`
	Code int32  `protobuf:"varint,2,opt,name=code,proto3" json:"code,omitempty"`
	Str  string `protobuf:"bytes,3,opt,name=str,proto3" json:"str,omitempty"`
}

func (x *UpdateInfor) Reset() {
	*x = UpdateInfor{}
	if protoimpl.UnsafeEnabled {
		mi := &file_register_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateInfor) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateInfor) ProtoMessage() {}

func (x *UpdateInfor) ProtoReflect() protoreflect.Message {
	mi := &file_register_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateInfor.ProtoReflect.Descriptor instead.
func (*UpdateInfor) Descriptor() ([]byte, []int) {
	return file_register_proto_rawDescGZIP(), []int{2}
}

func (x *UpdateInfor) GetV() *Users {
	if x != nil {
		return x.V
	}
	return nil
}

func (x *UpdateInfor) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *UpdateInfor) GetStr() string {
	if x != nil {
		return x.Str
	}
	return ""
}

var File_register_proto protoreflect.FileDescriptor

var file_register_proto_rawDesc = []byte{
	0x0a, 0x0e, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x12, 0x05, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x33, 0x0a, 0x05, 0x55, 0x73, 0x65, 0x72, 0x73,
	0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x70, 0x61, 0x73, 0x73, 0x77, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x70, 0x61, 0x73, 0x73, 0x77, 0x64, 0x22, 0x25, 0x0a, 0x0b,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x4d, 0x73, 0x67, 0x12, 0x16, 0x0a, 0x06, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x22, 0x4f, 0x0a, 0x0b, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x49, 0x6e, 0x66,
	0x6f, 0x72, 0x12, 0x1a, 0x0a, 0x01, 0x76, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x73, 0x52, 0x01, 0x76, 0x12, 0x12,
	0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x63, 0x6f,
	0x64, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x73, 0x74, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x03, 0x73, 0x74, 0x72, 0x32, 0xa0, 0x01, 0x0a, 0x08, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65,
	0x72, 0x12, 0x31, 0x0a, 0x09, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x0c,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x73, 0x1a, 0x12, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x4d, 0x73, 0x67,
	0x28, 0x01, 0x30, 0x01, 0x12, 0x2b, 0x0a, 0x03, 0x52, 0x65, 0x67, 0x12, 0x0c, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x73, 0x1a, 0x12, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x4d, 0x73, 0x67, 0x28, 0x01, 0x30,
	0x01, 0x12, 0x34, 0x0a, 0x06, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x12, 0x12, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x1a,
	0x12, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x4d, 0x73, 0x67, 0x28, 0x01, 0x30, 0x01, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_register_proto_rawDescOnce sync.Once
	file_register_proto_rawDescData = file_register_proto_rawDesc
)

func file_register_proto_rawDescGZIP() []byte {
	file_register_proto_rawDescOnce.Do(func() {
		file_register_proto_rawDescData = protoimpl.X.CompressGZIP(file_register_proto_rawDescData)
	})
	return file_register_proto_rawDescData
}

var file_register_proto_msgTypes = make([]protoimpl.MessageInfo, 3)
var file_register_proto_goTypes = []interface{}{
	(*Users)(nil),       // 0: proto.Users
	(*ResponseMsg)(nil), // 1: proto.ResponseMsg
	(*UpdateInfor)(nil), // 2: proto.UpdateInfor
}
var file_register_proto_depIdxs = []int32{
	0, // 0: proto.UpdateInfor.v:type_name -> proto.Users
	0, // 1: proto.Register.LoginName:input_type -> proto.Users
	0, // 2: proto.Register.Reg:input_type -> proto.Users
	2, // 3: proto.Register.Update:input_type -> proto.UpdateInfor
	1, // 4: proto.Register.LoginName:output_type -> proto.ResponseMsg
	1, // 5: proto.Register.Reg:output_type -> proto.ResponseMsg
	1, // 6: proto.Register.Update:output_type -> proto.ResponseMsg
	4, // [4:7] is the sub-list for method output_type
	1, // [1:4] is the sub-list for method input_type
	1, // [1:1] is the sub-list for extension type_name
	1, // [1:1] is the sub-list for extension extendee
	0, // [0:1] is the sub-list for field type_name
}

func init() { file_register_proto_init() }
func file_register_proto_init() {
	if File_register_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_register_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Users); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_register_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResponseMsg); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_register_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateInfor); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_register_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   3,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_register_proto_goTypes,
		DependencyIndexes: file_register_proto_depIdxs,
		MessageInfos:      file_register_proto_msgTypes,
	}.Build()
	File_register_proto = out.File
	file_register_proto_rawDesc = nil
	file_register_proto_goTypes = nil
	file_register_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// RegisterClient is the client API for Register service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type RegisterClient interface {
	LoginName(ctx context.Context, opts ...grpc.CallOption) (Register_LoginNameClient, error)
	Reg(ctx context.Context, opts ...grpc.CallOption) (Register_RegClient, error)
	Update(ctx context.Context, opts ...grpc.CallOption) (Register_UpdateClient, error)
}

type registerClient struct {
	cc grpc.ClientConnInterface
}

func NewRegisterClient(cc grpc.ClientConnInterface) RegisterClient {
	return &registerClient{cc}
}

func (c *registerClient) LoginName(ctx context.Context, opts ...grpc.CallOption) (Register_LoginNameClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Register_serviceDesc.Streams[0], "/proto.Register/LoginName", opts...)
	if err != nil {
		return nil, err
	}
	x := &registerLoginNameClient{stream}
	return x, nil
}

type Register_LoginNameClient interface {
	Send(*Users) error
	Recv() (*ResponseMsg, error)
	grpc.ClientStream
}

type registerLoginNameClient struct {
	grpc.ClientStream
}

func (x *registerLoginNameClient) Send(m *Users) error {
	return x.ClientStream.SendMsg(m)
}

func (x *registerLoginNameClient) Recv() (*ResponseMsg, error) {
	m := new(ResponseMsg)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *registerClient) Reg(ctx context.Context, opts ...grpc.CallOption) (Register_RegClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Register_serviceDesc.Streams[1], "/proto.Register/Reg", opts...)
	if err != nil {
		return nil, err
	}
	x := &registerRegClient{stream}
	return x, nil
}

type Register_RegClient interface {
	Send(*Users) error
	Recv() (*ResponseMsg, error)
	grpc.ClientStream
}

type registerRegClient struct {
	grpc.ClientStream
}

func (x *registerRegClient) Send(m *Users) error {
	return x.ClientStream.SendMsg(m)
}

func (x *registerRegClient) Recv() (*ResponseMsg, error) {
	m := new(ResponseMsg)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *registerClient) Update(ctx context.Context, opts ...grpc.CallOption) (Register_UpdateClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Register_serviceDesc.Streams[2], "/proto.Register/Update", opts...)
	if err != nil {
		return nil, err
	}
	x := &registerUpdateClient{stream}
	return x, nil
}

type Register_UpdateClient interface {
	Send(*UpdateInfor) error
	Recv() (*ResponseMsg, error)
	grpc.ClientStream
}

type registerUpdateClient struct {
	grpc.ClientStream
}

func (x *registerUpdateClient) Send(m *UpdateInfor) error {
	return x.ClientStream.SendMsg(m)
}

func (x *registerUpdateClient) Recv() (*ResponseMsg, error) {
	m := new(ResponseMsg)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// RegisterServer is the server API for Register service.
type RegisterServer interface {
	LoginName(Register_LoginNameServer) error
	Reg(Register_RegServer) error
	Update(Register_UpdateServer) error
}

// UnimplementedRegisterServer can be embedded to have forward compatible implementations.
type UnimplementedRegisterServer struct {
}

func (*UnimplementedRegisterServer) LoginName(Register_LoginNameServer) error {
	return status.Errorf(codes.Unimplemented, "method LoginName not implemented")
}
func (*UnimplementedRegisterServer) Reg(Register_RegServer) error {
	return status.Errorf(codes.Unimplemented, "method Reg not implemented")
}
func (*UnimplementedRegisterServer) Update(Register_UpdateServer) error {
	return status.Errorf(codes.Unimplemented, "method Update not implemented")
}

func RegisterRegisterServer(s *grpc.Server, srv RegisterServer) {
	s.RegisterService(&_Register_serviceDesc, srv)
}

func _Register_LoginName_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(RegisterServer).LoginName(&registerLoginNameServer{stream})
}

type Register_LoginNameServer interface {
	Send(*ResponseMsg) error
	Recv() (*Users, error)
	grpc.ServerStream
}

type registerLoginNameServer struct {
	grpc.ServerStream
}

func (x *registerLoginNameServer) Send(m *ResponseMsg) error {
	return x.ServerStream.SendMsg(m)
}

func (x *registerLoginNameServer) Recv() (*Users, error) {
	m := new(Users)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _Register_Reg_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(RegisterServer).Reg(&registerRegServer{stream})
}

type Register_RegServer interface {
	Send(*ResponseMsg) error
	Recv() (*Users, error)
	grpc.ServerStream
}

type registerRegServer struct {
	grpc.ServerStream
}

func (x *registerRegServer) Send(m *ResponseMsg) error {
	return x.ServerStream.SendMsg(m)
}

func (x *registerRegServer) Recv() (*Users, error) {
	m := new(Users)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _Register_Update_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(RegisterServer).Update(&registerUpdateServer{stream})
}

type Register_UpdateServer interface {
	Send(*ResponseMsg) error
	Recv() (*UpdateInfor, error)
	grpc.ServerStream
}

type registerUpdateServer struct {
	grpc.ServerStream
}

func (x *registerUpdateServer) Send(m *ResponseMsg) error {
	return x.ServerStream.SendMsg(m)
}

func (x *registerUpdateServer) Recv() (*UpdateInfor, error) {
	m := new(UpdateInfor)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _Register_serviceDesc = grpc.ServiceDesc{
	ServiceName: "proto.Register",
	HandlerType: (*RegisterServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "LoginName",
			Handler:       _Register_LoginName_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "Reg",
			Handler:       _Register_Reg_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "Update",
			Handler:       _Register_Update_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "register.proto",
}
